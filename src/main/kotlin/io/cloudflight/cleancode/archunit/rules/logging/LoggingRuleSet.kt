package io.cloudflight.cleancode.archunit.rules.logging

import com.tngtech.archunit.base.DescribedPredicate
import com.tngtech.archunit.core.domain.JavaClass
import com.tngtech.archunit.junit.ArchTest
import com.tngtech.archunit.lang.syntax.ArchRuleDefinition.*
import com.tngtech.archunit.library.GeneralCodingRules
import io.cloudflight.cleancode.archunit.ArchRuleWithId.Companion.archRuleWithId
import org.slf4j.Logger

class LoggingRuleSet {

    @ArchTest
    val no_access_to_standard_streams_as_method =
        archRuleWithId(
            "logging.no-streams",
            noClasses().should(GeneralCodingRules.ACCESS_STANDARD_STREAMS)
        )

    @ArchTest
    val no_java_util_logging =
        archRuleWithId(
            "logging.no-java-util-logging",
            GeneralCodingRules.NO_CLASSES_SHOULD_USE_JAVA_UTIL_LOGGING
        )

    private val SLF4J_LOGGER =
        DescribedPredicate.describe<JavaClass>("it is a org.slf4j.Logger") { it.isAssignableTo(Logger::class.java) }

    @ArchTest
    val loggers_should_be_private_static_final =
        archRuleWithId(
            "logging.static-final-loggers",
            fields()
                .that()
                .haveRawType(SLF4J_LOGGER)
                .and()
                .areDeclaredInClassesThat()
                .resideOutsideOfPackage("..api")
                .should()
                .bePrivate()
                .andShould()
                .beStatic()
                .andShould()
                .beFinal()
        )

    @ArchTest
    val loggers_must_not_be_exposed_as_public_methods =
        archRuleWithId(
            "logging.do-not-expose-loggers-via-methods",
            methods().that()
                .haveRawReturnType(SLF4J_LOGGER)
                .and()
                .haveNameNotEndingWith("\$cp") // generated byte code for kotlin companion objects
                .and()
                .haveNameNotEndingWith("\$p")  // generated byte code magic around kotlin objects
                .should()
                .notBePublic()
                .allowEmptyShould(true)
        )

    @ArchTest
    val loggers_must_implement_klogging =
        archRuleWithId(
            "logging.do-not-extend-klogging",
            noClasses()
                .should().beAssignableTo("mu.KLogging")
        )

}